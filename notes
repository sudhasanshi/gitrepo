CI(continueous Integration)- integrate the changes from development team continously without manual intervention. so that we can give quick feedback to developer for their changes.
CD(continueous Deployment) - tested build shoud be deploy to production env as early as possible.
CD(continueous delivery)-each changes from development team shoud be build and deployed to test env to test the changes.

How do you secure jenkin?
we have used matrix based security. it provides check boxes, whichever the check-boxes we check user will have those permissions. 
to set-up this we have to go to manage jenkins-security-authentication(inside this we have to select) authorization(we have to select from drop-down) matrix based security
here we have to add user or group and need to check the check-boxes.

different types of security
a)matrix based security
b)role based security
c)project based security

different type of jobs
a)freestyle jobs
b)pipeline jobs
c)multi-branch pipeline jobs
d)git-hub organization pipeline

types of build triggers
1)build after other jobs build
  -here we can schedule the jobs after other jobs are build based on success or failure
2)build periodically
  -It will trigger the jenkin job based on time weather commit or no-commit
3)Poll SCM
  -It will trigger the jenkin job based on commit. if there are any commites within specified time it will trigger the job at specified time.
4)Webhook
  -It will trigger the jenkin job as soon as commit was done  

how to create jenkin job steps
1.go to dashbord of jenkin,click on new items and select the type of job,type the name of job and click on ok.
2.in configure page under scm need to select git and copy paste the URL of git repo and provide credentials to clone repo.
3.under build trigger need to select required build trigger method and in build section select execute shell and type the commands to build.
4.under post build action, need to select appropriate actions which required. it may be deployment,sending email,triggering other jobs,running test cases.


How do you install plugins if it's there in availble plugins
go to manage jenkins , click on manage plugin,under advanced tab upload the plugin file and install without restart.
we need to download plugin file from jenkins update centre
the downloaded plugin file will be in .hpi format(file with .hpi extension)

which are the plugins you have installed?
1)parameterized plugin-it is used to pass parameter to jenkins job. I have configured parameterized plugin for deployment job.
  deployment job has two parameters one is severname and build number. these values are passed to the deployment script inside jenkin job.
2)gearman plugin- It is high availbility plugin.if jenkin master goes down,jenkin will be up and running automatically on other server.
  gearman plugin allow us to add server details(second server). when jenkin is running on first master both the servers will be in sync. 
  as soon as jenkin master goes down, jenkin will be up and running on other servers.
3)publish over CIFS-it is used to copy files from linux to windows.
4)sonarscanner
5)artifactory tools
6)git, upstream,downstream

why slave machine are required/
master slave are used to distribute load to different server and also we can run specific job on specific servers.
eg: if I want to compile java source code on server which provides java environment only.

notes:
1.normally we will never run jobs on master
2.normally 10-15 slaves will be there
3.we will use labels to run on availble slaves.

Jenkins pipeline 
groovy script is used for defining jobs in jenkins pipeline
types
1.declarative pipeline
2.scripted pipeline

Jenkins file-it is file where we put all our job configuration to achieve multiple instance execution
            (by default it will take one executor until and unless we configure more executor in single pipeline job
			
			
1.declarative pipeline - here we are going to use keyword pipeline
  pipeline{}
  
we are going to use agent to run jobs on specific server.
agent - agent is block which is used to define which jobs to be run on which server

there are 4 types of agents
1.agent any -it is defined always at the pipeline level. I can not define this agent at the stage level. it can run on any availble server based on load.
2.agent docker-here image is used to run the jobs
3.agent none-if I define agent as none at the pipeline level then it is mandatory to define on each and every stages.  
4.label-if I want to run jobs on specific server then go with the label.
    agent {label='slave'}
	
2.scripted pipeline - here we are going to use the keyword node
 node {}
 instead of agent we are going to use pass the server name to runthe jobs.
 nade ('slave') {}


pipeline job-in normal pipeline, job is meant for building the specific branch from SCM and deploy to respective environments.
              pipeline job supports both pipeline steps to be added in jenkins configure and scm. we can use the pipeline for Adhoc job,
              parameterized job, execution and to debugging pipeline as code.

multi-branch pipeline - Is ment for building multiple branches from repo and deploy to respective environments (dev.uat.prod)
                        it works with different branches of pipeline and it creates number of pipeline as the number of branches containing jenkinfile
note-don't use multi-branch pipeline if you don't have standard branching startegy and CICD stages.


Jenkin-backup path?
/var/lib/jenkins take backup of this path and push to repo.(for this we can have separate job which should run on every-night)

Jenkins port number change path
/etc/default/jenkins file
http_port =8081
			  
	
master-slave configuration steps?
go to manage jenkin-manage nodes-click on permanent agent-no of executor(2)-root path/directory
(where this jenkin jobs should run /home/slave/jenkins(create this jenkin folder/dir in slave user) add credentials(ssh using private key id_rsa of slave)
select name of credentials-known hosts verification strategy.

java should be installed installed on both master and slave

slave
sudo su -
adduser slave
adduser slave
provide password
sudo su - slave
ssh-keygen
cd .ssh
cat is_rsa.pub > authorized_keys
chmod 700 authorized_keys

copy private IP and go to master server

master
sudo su -
cd /var/lib/jenkins
mkdir -p .ssh
cd .ssh
ssh-keyscan -H IP address >> /var/lib/jenkins/.ssh/known_hosts
chmod 700 known_hosts
chown jenkins:jenkins known_hosts

then go to jenkins dashboard under credentials add credentials of user(slave)
and private(id_rsa)values
go to node - add node(slave) and label(ex:java)and private IP


 
	
